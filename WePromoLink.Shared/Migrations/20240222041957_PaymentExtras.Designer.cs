// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WePromoLink.Data;

#nullable disable

namespace WePromoLink.Shared.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240222041957_PaymentExtras")]
    partial class PaymentExtras
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("WePromoLink.HitModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Commission")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Counter")
                        .HasColumnType("int");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FirstHitAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("GeoDataId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("GeolocatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsGeolocated")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastHitAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LinkModelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Origin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Payed")
                        .HasColumnType("bit");

                    b.Property<string>("SubscriptionId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GeoDataId");

                    b.HasIndex("LinkModelId");

                    b.ToTable("Hits");
                });

            modelBuilder.Entity("WePromoLink.Models.AbuseReportModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CampaignId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.HasIndex("UserId");

                    b.ToTable("AbuseReports");
                });

            modelBuilder.Entity("WePromoLink.Models.AffiliatedUserModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<int>("NumberPayments")
                        .HasColumnType("int");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("TotalPayments")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("UserModelId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("UserModelId");

                    b.ToTable("AffiliatedUsers");
                });

            modelBuilder.Entity("WePromoLink.Models.AffiliateModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("AffiliateLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Affiliates")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("MRR")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("OTR")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Profit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("UserModelId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserModelId")
                        .IsUnique();

                    b.ToTable("AffiliatePrograms");
                });

            modelBuilder.Entity("WePromoLink.Models.BitcoinBillingMethod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserModelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("VerifiedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("UserModelId")
                        .IsUnique();

                    b.ToTable("BitcoinBillings");
                });

            modelBuilder.Entity("WePromoLink.Models.CampaignModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Budget")
                        .HasPrecision(10, 4)
                        .HasColumnType("decimal(10,4)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("EPM")
                        .HasPrecision(10, 4)
                        .HasColumnType("decimal(10,4)");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("ImageDataModelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastClick")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastShared")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserModelId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ExternalId");

                    b.HasIndex("ImageDataModelId");

                    b.HasIndex("UserModelId");

                    b.ToTable("Campaigns");
                });

            modelBuilder.Entity("WePromoLink.Models.GenericEventModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("GenericEvent");
                });

            modelBuilder.Entity("WePromoLink.Models.GeoDataModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Continent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryFlagUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Currency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ISP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Latitude")
                        .HasPrecision(20, 14)
                        .HasColumnType("decimal(20,14)");

                    b.Property<decimal?>("Longitude")
                        .HasPrecision(20, 14)
                        .HasColumnType("decimal(20,14)");

                    b.Property<string>("Region")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegionCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Zip")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("GeoDatas");
                });

            modelBuilder.Entity("WePromoLink.Models.ImageDataModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Bound")
                        .HasColumnType("bit");

                    b.Property<string>("Compressed")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("CompressedAspectRatio")
                        .HasColumnType("float");

                    b.Property<int>("CompressedHeight")
                        .HasColumnType("int");

                    b.Property<int>("CompressedWidth")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Medium")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("MediumAspectRatio")
                        .HasColumnType("float");

                    b.Property<int>("MediumHeight")
                        .HasColumnType("int");

                    b.Property<int>("MediumWidth")
                        .HasColumnType("int");

                    b.Property<string>("Original")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("OriginalAspectRatio")
                        .HasColumnType("float");

                    b.Property<int>("OriginalHeight")
                        .HasColumnType("int");

                    b.Property<int>("OriginalWidth")
                        .HasColumnType("int");

                    b.Property<string>("Thumbnail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ThumbnailAspectRatio")
                        .HasColumnType("float");

                    b.Property<int>("ThumbnailHeight")
                        .HasColumnType("int");

                    b.Property<int>("ThumbnailWidth")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ImageDatas");
                });

            modelBuilder.Entity("WePromoLink.Models.JoinWaitingListModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("JoinWaitingLists");
                });

            modelBuilder.Entity("WePromoLink.Models.LinkModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CampaignModelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastClick")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserModelId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CampaignModelId");

                    b.HasIndex("ExternalId");

                    b.HasIndex("UserModelId");

                    b.ToTable("Links");
                });

            modelBuilder.Entity("WePromoLink.Models.MyPageModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("CallOfAction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Conversion")
                        .HasColumnType("int");

                    b.Property<string>("ImageHeaderUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QRUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Template")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserModelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Visited")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserModelId")
                        .IsUnique();

                    b.ToTable("MyPages");
                });

            modelBuilder.Entity("WePromoLink.Models.NotificationModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Etag")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpiredAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserModelId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ExternalId");

                    b.HasIndex("UserModelId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("WePromoLink.Models.PaymentTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasPrecision(10, 4)
                        .HasColumnType("decimal(10,4)");

                    b.Property<decimal?>("AmountNet")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("CampaignModelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpiredAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("LinkModelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Metadata")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("PaymentProcessorFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StripeTranferId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserModelId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CampaignModelId");

                    b.HasIndex("ExternalId");

                    b.HasIndex("LinkModelId");

                    b.HasIndex("UserModelId");

                    b.ToTable("PaymentTransactions");
                });

            modelBuilder.Entity("WePromoLink.Models.PrivacyModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("PublicMyPage")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowAffiliateLinkOnMyPage")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowAffiliateLinkOnProfile")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowCallOfActionOnMyPage")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowCampaignsOnProfile")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowEmailOnProfile")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowLinksOnMyPage")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowLinksOnProfile")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowProfitOnProfile")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowQRUrlOnProfile")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowSocialsOnMyPage")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowSocialsOnProfile")
                        .HasColumnType("bit");

                    b.Property<bool>("UseMyPageTemplate")
                        .HasColumnType("bit");

                    b.Property<Guid>("UserModelId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserModelId")
                        .IsUnique();

                    b.ToTable("Privacies");
                });

            modelBuilder.Entity("WePromoLink.Models.ProfileModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageHeaderUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MyPageId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Social")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserModelId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserModelId")
                        .IsUnique();

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("WePromoLink.Models.SettingModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("CampaignClickedOnEmail")
                        .HasColumnType("bit");

                    b.Property<bool>("CampaignClickedOnNotification")
                        .HasColumnType("bit");

                    b.Property<bool>("CampaignClickedOnRealTime")
                        .HasColumnType("bit");

                    b.Property<bool>("CampaignCreatedOnEmail")
                        .HasColumnType("bit");

                    b.Property<bool>("CampaignCreatedOnNotification")
                        .HasColumnType("bit");

                    b.Property<bool>("CampaignCreatedOnRealTime")
                        .HasColumnType("bit");

                    b.Property<bool>("CampaignDeletedOnEmail")
                        .HasColumnType("bit");

                    b.Property<bool>("CampaignDeletedOnNotification")
                        .HasColumnType("bit");

                    b.Property<bool>("CampaignDeletedOnRealTime")
                        .HasColumnType("bit");

                    b.Property<bool>("CampaignEditedOnEmail")
                        .HasColumnType("bit");

                    b.Property<bool>("CampaignEditedOnNotification")
                        .HasColumnType("bit");

                    b.Property<bool>("CampaignEditedOnRealTime")
                        .HasColumnType("bit");

                    b.Property<string>("CampaignLanguages")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("CampaignPublishedOnEmail")
                        .HasColumnType("bit");

                    b.Property<bool>("CampaignPublishedOnNotification")
                        .HasColumnType("bit");

                    b.Property<bool>("CampaignPublishedOnRealTime")
                        .HasColumnType("bit");

                    b.Property<bool>("CampaignSharedOnEmail")
                        .HasColumnType("bit");

                    b.Property<bool>("CampaignSharedOnNotification")
                        .HasColumnType("bit");

                    b.Property<bool>("CampaignSharedOnRealTime")
                        .HasColumnType("bit");

                    b.Property<bool>("CampaignSoldOutOnEmail")
                        .HasColumnType("bit");

                    b.Property<bool>("CampaignSoldOutOnNotification")
                        .HasColumnType("bit");

                    b.Property<bool>("CampaignSoldOutOnRealTime")
                        .HasColumnType("bit");

                    b.Property<bool>("CampaignUnPublishedOnEmail")
                        .HasColumnType("bit");

                    b.Property<bool>("CampaignUnPublishedOnNotification")
                        .HasColumnType("bit");

                    b.Property<bool>("CampaignUnPublishedOnRealTime")
                        .HasColumnType("bit");

                    b.Property<bool>("HitGeoLocalizedSuccessOnEmail")
                        .HasColumnType("bit");

                    b.Property<bool>("HitGeoLocalizedSuccessOnNotification")
                        .HasColumnType("bit");

                    b.Property<bool>("HitGeoLocalizedSuccessOnRealTime")
                        .HasColumnType("bit");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LinkClickedOnEmail")
                        .HasColumnType("bit");

                    b.Property<bool>("LinkClickedOnNotification")
                        .HasColumnType("bit");

                    b.Property<bool>("LinkClickedOnRealTime")
                        .HasColumnType("bit");

                    b.Property<bool>("LinkCreatedOnEmail")
                        .HasColumnType("bit");

                    b.Property<bool>("LinkCreatedOnNotification")
                        .HasColumnType("bit");

                    b.Property<bool>("LinkCreatedOnRealTime")
                        .HasColumnType("bit");

                    b.Property<Guid>("UserModelId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserModelId")
                        .IsUnique();

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("WePromoLink.Models.StaticPageDataTemplateModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Etag")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpiredAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Json")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("MaxAge")
                        .HasColumnType("time");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("StaticPageDataTemplates");
                });

            modelBuilder.Entity("WePromoLink.Models.StaticPageModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Etag")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpiredAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("IP")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("MaxAge")
                        .HasColumnType("time");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StaticPageDataTemplateModelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StaticPageWebsiteTemplateModelId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("StaticPageDataTemplateModelId");

                    b.HasIndex("StaticPageWebsiteTemplateModelId");

                    b.ToTable("StaticPages");
                });

            modelBuilder.Entity("WePromoLink.Models.StaticPageProductByPageModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AffiliateClicks")
                        .HasColumnType("int");

                    b.Property<int>("BuyClicks")
                        .HasColumnType("int");

                    b.Property<decimal>("Profit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("StaticPageModelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("StaticPageProductModelId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("StaticPageModelId");

                    b.HasIndex("StaticPageProductModelId");

                    b.ToTable("StaticPageProductByPages");
                });

            modelBuilder.Entity("WePromoLink.Models.StaticPageProductByResourceModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("StaticPageProductModelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("StaticPageResourceModelId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("StaticPageProductModelId");

                    b.HasIndex("StaticPageResourceModelId");

                    b.ToTable("StaticPageProductByResources");
                });

            modelBuilder.Entity("WePromoLink.Models.StaticPageProductModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AffiliateLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AffiliateProgram")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BuyLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Commission")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CostPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Height")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Inventory")
                        .HasColumnType("int");

                    b.Property<decimal?>("Length")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SKU")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Width")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("StaticPageProducts");
                });

            modelBuilder.Entity("WePromoLink.Models.StaticPageResourceModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Height")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("SizeMB")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Width")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("StaticPageResources");
                });

            modelBuilder.Entity("WePromoLink.Models.StaticPageWebsiteTemplateModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Etag")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpiredAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("MaxAge")
                        .HasColumnType("time");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("StaticPageWebsiteTemplates");
                });

            modelBuilder.Entity("WePromoLink.Models.StripeBillingMethod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserModelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("VerifiedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("UserModelId")
                        .IsUnique();

                    b.ToTable("StripeBillings");
                });

            modelBuilder.Entity("WePromoLink.Models.SubscriptionFeatureModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("BoolValue")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SubscriptionPlanModelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SubscriptionPlanModelId");

                    b.ToTable("SubscriptionFeatures");

                    b.HasData(
                        new
                        {
                            Id = new Guid("da970b81-ed0d-4050-8f31-c3f62b57f042"),
                            BoolValue = false,
                            Name = "Campaigns",
                            SubscriptionPlanModelId = new Guid("7ac5c559-5a90-41a8-b40f-756638391f21"),
                            Value = "Unlimited"
                        },
                        new
                        {
                            Id = new Guid("877544c7-c012-405a-935e-29d516290c5d"),
                            BoolValue = false,
                            Name = "Links",
                            SubscriptionPlanModelId = new Guid("7ac5c559-5a90-41a8-b40f-756638391f21"),
                            Value = "Unlimited"
                        },
                        new
                        {
                            Id = new Guid("1d8f7c03-ad4b-4d69-9329-c726c743db42"),
                            BoolValue = false,
                            Name = "Commission per click",
                            SubscriptionPlanModelId = new Guid("7ac5c559-5a90-41a8-b40f-756638391f21"),
                            Value = "U$0.01"
                        },
                        new
                        {
                            Id = new Guid("e6ad18a7-ce8f-40b6-8435-79aedf976e1c"),
                            BoolValue = true,
                            Name = "Contain ads",
                            SubscriptionPlanModelId = new Guid("7ac5c559-5a90-41a8-b40f-756638391f21"),
                            Value = ""
                        },
                        new
                        {
                            Id = new Guid("3d2a3486-1f9a-433b-90b6-497028bafdd7"),
                            BoolValue = false,
                            Name = "Campaigns",
                            SubscriptionPlanModelId = new Guid("c2530b8d-baf6-4199-bb65-1ad732feeacf"),
                            Value = "Unlimited"
                        },
                        new
                        {
                            Id = new Guid("aa17f4e5-f5d4-4f86-a375-3b73e27d1961"),
                            BoolValue = false,
                            Name = "Links",
                            SubscriptionPlanModelId = new Guid("c2530b8d-baf6-4199-bb65-1ad732feeacf"),
                            Value = "Unlimited"
                        },
                        new
                        {
                            Id = new Guid("ca219652-9954-48c0-9c33-dfd7eae22a27"),
                            BoolValue = false,
                            Name = "Commission per click",
                            SubscriptionPlanModelId = new Guid("c2530b8d-baf6-4199-bb65-1ad732feeacf"),
                            Value = "U$0.00"
                        },
                        new
                        {
                            Id = new Guid("a6697425-7613-4cd6-aaca-92334a653ed2"),
                            BoolValue = false,
                            Name = "Contain ads",
                            SubscriptionPlanModelId = new Guid("c2530b8d-baf6-4199-bb65-1ad732feeacf"),
                            Value = ""
                        });
                });

            modelBuilder.Entity("WePromoLink.Models.SubscriptionModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CanceledAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpiredAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsCanceled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExpired")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastPayment")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("NextPayment")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StripeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SubscriptionPlanModelId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ExternalId");

                    b.HasIndex("SubscriptionPlanModelId");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("WePromoLink.Models.SubscriptionPlanModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Annually")
                        .HasPrecision(10, 4)
                        .HasColumnType("decimal(10,4)");

                    b.Property<string>("AnnualyPriceId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Commission")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Discount")
                        .HasPrecision(10, 4)
                        .HasColumnType("decimal(10,4)");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Metadata")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Monthly")
                        .HasPrecision(10, 4)
                        .HasColumnType("decimal(10,4)");

                    b.Property<string>("MonthlyPriceId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ExternalId");

                    b.ToTable("SubscriptionPlans");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7ac5c559-5a90-41a8-b40f-756638391f21"),
                            Annually = 0m,
                            AnnualyPriceId = "",
                            Commission = 0.01m,
                            Discount = 0m,
                            ExternalId = "jdqSEYBr5T_U",
                            Level = 1,
                            Monthly = 0m,
                            MonthlyPriceId = "price_1Ol0LGC26XBdqsojWuT9BKvb",
                            Order = 2,
                            PaymentMethod = "stripe",
                            Tag = "",
                            Title = "Basic"
                        },
                        new
                        {
                            Id = new Guid("c2530b8d-baf6-4199-bb65-1ad732feeacf"),
                            Annually = 0m,
                            AnnualyPriceId = "",
                            Commission = 0m,
                            Discount = 0m,
                            ExternalId = "oLbDB1_kVyV6",
                            Level = 2,
                            Monthly = 4.99m,
                            MonthlyPriceId = "price_1OkwiHC26XBdqsojpgor0QaV",
                            Order = 3,
                            PaymentMethod = "stripe",
                            Tag = "Popular",
                            Title = "Professional"
                        });
                });

            modelBuilder.Entity("WePromoLink.Models.SurveyAnswerModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SurveyQuestionModelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SurveyQuestionModelId");

                    b.ToTable("SurveyAnswers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("74f28dfe-9ae3-4890-9e6c-6fb1c3ccf226"),
                            SurveyQuestionModelId = new Guid("56fda914-0d2c-4360-bcfb-a726c381ce5a"),
                            Value = "Earning money through affiliate marketing"
                        },
                        new
                        {
                            Id = new Guid("2a68a734-c2e8-45ca-9e39-dec918c5dea8"),
                            SurveyQuestionModelId = new Guid("56fda914-0d2c-4360-bcfb-a726c381ce5a"),
                            Value = "Promoting my products or services"
                        },
                        new
                        {
                            Id = new Guid("d3dc505a-4346-41f1-bcc3-e015de4c3835"),
                            SurveyQuestionModelId = new Guid("56fda914-0d2c-4360-bcfb-a726c381ce5a"),
                            Value = "Exploring new advertising opportunities"
                        },
                        new
                        {
                            Id = new Guid("ba72d0e0-731f-4a27-8603-2a9c7ab37b3e"),
                            SurveyQuestionModelId = new Guid("56fda914-0d2c-4360-bcfb-a726c381ce5a"),
                            Value = "Connecting with other users and businesses"
                        },
                        new
                        {
                            Id = new Guid("43f8c439-c412-443e-a553-ee77bd655a56"),
                            SurveyQuestionModelId = new Guid("acf2f98b-7091-40ea-9c7f-3a6ffab5b06d"),
                            Value = "Credit/Debit card"
                        },
                        new
                        {
                            Id = new Guid("8bd1b616-bcf6-4c9e-9c6d-ddf1ca479911"),
                            SurveyQuestionModelId = new Guid("acf2f98b-7091-40ea-9c7f-3a6ffab5b06d"),
                            Value = "PayPal"
                        },
                        new
                        {
                            Id = new Guid("464cd230-7cbc-4383-bd7b-873c9ecf708e"),
                            SurveyQuestionModelId = new Guid("acf2f98b-7091-40ea-9c7f-3a6ffab5b06d"),
                            Value = "Stripe"
                        },
                        new
                        {
                            Id = new Guid("cd6968fe-b907-4dc8-8d5a-58858861eb00"),
                            SurveyQuestionModelId = new Guid("acf2f98b-7091-40ea-9c7f-3a6ffab5b06d"),
                            Value = "Bank transfer"
                        },
                        new
                        {
                            Id = new Guid("39977189-359e-4306-889c-4631481245f6"),
                            SurveyQuestionModelId = new Guid("b1fcc131-ec3c-42ad-9827-e3af177028ff"),
                            Value = "Monthly subscription fee"
                        },
                        new
                        {
                            Id = new Guid("d453c2cc-b0d9-4858-844b-51eb49f6b44e"),
                            SurveyQuestionModelId = new Guid("b1fcc131-ec3c-42ad-9827-e3af177028ff"),
                            Value = "Commission on earnings"
                        },
                        new
                        {
                            Id = new Guid("2034449e-2eda-4bce-a8e5-2792ca68ed0c"),
                            SurveyQuestionModelId = new Guid("b1fcc131-ec3c-42ad-9827-e3af177028ff"),
                            Value = "I'm not sure"
                        },
                        new
                        {
                            Id = new Guid("c10f7e27-682b-411f-afc2-b8a796d22f12"),
                            SurveyQuestionModelId = new Guid("2c3180db-5c66-4544-8961-9882d186743b"),
                            Value = "Extremely useful"
                        },
                        new
                        {
                            Id = new Guid("36f22ca9-c635-468b-b442-9e5990d73e77"),
                            SurveyQuestionModelId = new Guid("2c3180db-5c66-4544-8961-9882d186743b"),
                            Value = "Very useful"
                        },
                        new
                        {
                            Id = new Guid("8de39547-f9e7-4186-b118-f9a47993f4aa"),
                            SurveyQuestionModelId = new Guid("2c3180db-5c66-4544-8961-9882d186743b"),
                            Value = "Somewhat useful"
                        },
                        new
                        {
                            Id = new Guid("6bc5055a-178e-49f8-a2d4-8174dac1c21f"),
                            SurveyQuestionModelId = new Guid("2c3180db-5c66-4544-8961-9882d186743b"),
                            Value = "Not very useful"
                        },
                        new
                        {
                            Id = new Guid("f09133f6-31e4-45ad-ba9c-16758a7f9027"),
                            SurveyQuestionModelId = new Guid("2c3180db-5c66-4544-8961-9882d186743b"),
                            Value = "Not useful at all"
                        },
                        new
                        {
                            Id = new Guid("3bf58a43-8b2d-4cc3-8a5c-9c00dc29cfa4"),
                            SurveyQuestionModelId = new Guid("3f934969-0fb6-4711-86cc-86e16c98315c"),
                            Value = "More campaign customization options"
                        },
                        new
                        {
                            Id = new Guid("e619692e-1110-4d41-a550-29f7c358e66d"),
                            SurveyQuestionModelId = new Guid("3f934969-0fb6-4711-86cc-86e16c98315c"),
                            Value = "Advanced analytics and reporting"
                        },
                        new
                        {
                            Id = new Guid("4d40fe2f-8d7a-49fb-9167-838b5193a40a"),
                            SurveyQuestionModelId = new Guid("3f934969-0fb6-4711-86cc-86e16c98315c"),
                            Value = "Integration with other advertising platforms"
                        },
                        new
                        {
                            Id = new Guid("39d7a0f3-06ae-4f7a-97ef-a42e09027339"),
                            SurveyQuestionModelId = new Guid("3f934969-0fb6-4711-86cc-86e16c98315c"),
                            Value = "Improved user interface and navigation"
                        },
                        new
                        {
                            Id = new Guid("ac7c077b-7c96-4527-91c5-69f4286792cf"),
                            SurveyQuestionModelId = new Guid("3f934969-0fb6-4711-86cc-86e16c98315c"),
                            Value = "I'm not sure"
                        });
                });

            modelBuilder.Entity("WePromoLink.Models.SurveyDatapointModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("SurveyAnswerModelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SurveyQuestionModelId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SurveyAnswerModelId");

                    b.HasIndex("SurveyQuestionModelId");

                    b.ToTable("SurveyDatapoints");
                });

            modelBuilder.Entity("WePromoLink.Models.SurveyQuestionModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Group")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SurveyQuestions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("56fda914-0d2c-4360-bcfb-a726c381ce5a"),
                            Group = 1,
                            Value = "What motivates you to use a platform like WePromoLink?"
                        },
                        new
                        {
                            Id = new Guid("acf2f98b-7091-40ea-9c7f-3a6ffab5b06d"),
                            Group = 2,
                            Value = "Which payment methods do you prefer for platform subscriptions and earnings withdrawals?"
                        },
                        new
                        {
                            Id = new Guid("b1fcc131-ec3c-42ad-9827-e3af177028ff"),
                            Group = 3,
                            Value = "Do you prefer a monthly subscription fee or paying a commission on earnings?"
                        },
                        new
                        {
                            Id = new Guid("2c3180db-5c66-4544-8961-9882d186743b"),
                            Group = 4,
                            Value = "How useful do you find the WePromoLink platform for your advertising needs?"
                        },
                        new
                        {
                            Id = new Guid("3f934969-0fb6-4711-86cc-86e16c98315c"),
                            Group = 5,
                            Value = "What additional features or improvements would you like to see on the WePromoLink platform?"
                        });
                });

            modelBuilder.Entity("WePromoLink.Models.UserModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Available")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("BlockageCause")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Budget")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirebaseId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fullname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSubscribed")
                        .HasColumnType("bit");

                    b.Property<decimal>("Profit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("SubscriptionModelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ThumbnailImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ExternalId");

                    b.HasIndex("SubscriptionModelId")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("WePromoLink.HitModel", b =>
                {
                    b.HasOne("WePromoLink.Models.GeoDataModel", "GeoData")
                        .WithMany()
                        .HasForeignKey("GeoDataId");

                    b.HasOne("WePromoLink.Models.LinkModel", "Link")
                        .WithMany("Hits")
                        .HasForeignKey("LinkModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GeoData");

                    b.Navigation("Link");
                });

            modelBuilder.Entity("WePromoLink.Models.AbuseReportModel", b =>
                {
                    b.HasOne("WePromoLink.Models.CampaignModel", "Campaign")
                        .WithMany()
                        .HasForeignKey("CampaignId");

                    b.HasOne("WePromoLink.Models.UserModel", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campaign");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WePromoLink.Models.AffiliatedUserModel", b =>
                {
                    b.HasOne("WePromoLink.Models.UserModel", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WePromoLink.Models.UserModel", "User")
                        .WithMany("AffiliatedUsers")
                        .HasForeignKey("UserModelId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Parent");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WePromoLink.Models.AffiliateModel", b =>
                {
                    b.HasOne("WePromoLink.Models.UserModel", "UserModel")
                        .WithOne("AffiliateProgram")
                        .HasForeignKey("WePromoLink.Models.AffiliateModel", "UserModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserModel");
                });

            modelBuilder.Entity("WePromoLink.Models.BitcoinBillingMethod", b =>
                {
                    b.HasOne("WePromoLink.Models.UserModel", "User")
                        .WithOne("BitcoinBillingMethod")
                        .HasForeignKey("WePromoLink.Models.BitcoinBillingMethod", "UserModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WePromoLink.Models.CampaignModel", b =>
                {
                    b.HasOne("WePromoLink.Models.ImageDataModel", "ImageData")
                        .WithMany()
                        .HasForeignKey("ImageDataModelId");

                    b.HasOne("WePromoLink.Models.UserModel", "User")
                        .WithMany("Campaigns")
                        .HasForeignKey("UserModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ImageData");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WePromoLink.Models.LinkModel", b =>
                {
                    b.HasOne("WePromoLink.Models.CampaignModel", "Campaign")
                        .WithMany("Links")
                        .HasForeignKey("CampaignModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WePromoLink.Models.UserModel", "User")
                        .WithMany("Links")
                        .HasForeignKey("UserModelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Campaign");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WePromoLink.Models.MyPageModel", b =>
                {
                    b.HasOne("WePromoLink.Models.UserModel", "UserModel")
                        .WithOne("MyPage")
                        .HasForeignKey("WePromoLink.Models.MyPageModel", "UserModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserModel");
                });

            modelBuilder.Entity("WePromoLink.Models.NotificationModel", b =>
                {
                    b.HasOne("WePromoLink.Models.UserModel", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WePromoLink.Models.PaymentTransaction", b =>
                {
                    b.HasOne("WePromoLink.Models.CampaignModel", "Campaign")
                        .WithMany("Transactions")
                        .HasForeignKey("CampaignModelId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("WePromoLink.Models.LinkModel", "Link")
                        .WithMany("Transactions")
                        .HasForeignKey("LinkModelId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("WePromoLink.Models.UserModel", "User")
                        .WithMany("Transactions")
                        .HasForeignKey("UserModelId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Campaign");

                    b.Navigation("Link");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WePromoLink.Models.PrivacyModel", b =>
                {
                    b.HasOne("WePromoLink.Models.UserModel", "UserModel")
                        .WithOne("Privacy")
                        .HasForeignKey("WePromoLink.Models.PrivacyModel", "UserModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserModel");
                });

            modelBuilder.Entity("WePromoLink.Models.ProfileModel", b =>
                {
                    b.HasOne("WePromoLink.Models.UserModel", "UserModel")
                        .WithOne("Profile")
                        .HasForeignKey("WePromoLink.Models.ProfileModel", "UserModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserModel");
                });

            modelBuilder.Entity("WePromoLink.Models.SettingModel", b =>
                {
                    b.HasOne("WePromoLink.Models.UserModel", "UserModel")
                        .WithOne("Setting")
                        .HasForeignKey("WePromoLink.Models.SettingModel", "UserModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserModel");
                });

            modelBuilder.Entity("WePromoLink.Models.StaticPageModel", b =>
                {
                    b.HasOne("WePromoLink.Models.StaticPageDataTemplateModel", "StaticPageDataTemplate")
                        .WithMany()
                        .HasForeignKey("StaticPageDataTemplateModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WePromoLink.Models.StaticPageWebsiteTemplateModel", "StaticPageWebsiteTemplate")
                        .WithMany()
                        .HasForeignKey("StaticPageWebsiteTemplateModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StaticPageDataTemplate");

                    b.Navigation("StaticPageWebsiteTemplate");
                });

            modelBuilder.Entity("WePromoLink.Models.StaticPageProductByPageModel", b =>
                {
                    b.HasOne("WePromoLink.Models.StaticPageModel", "Page")
                        .WithMany()
                        .HasForeignKey("StaticPageModelId");

                    b.HasOne("WePromoLink.Models.StaticPageProductModel", "Product")
                        .WithMany()
                        .HasForeignKey("StaticPageProductModelId");

                    b.Navigation("Page");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("WePromoLink.Models.StaticPageProductByResourceModel", b =>
                {
                    b.HasOne("WePromoLink.Models.StaticPageProductModel", "Product")
                        .WithMany()
                        .HasForeignKey("StaticPageProductModelId");

                    b.HasOne("WePromoLink.Models.StaticPageResourceModel", "Resource")
                        .WithMany()
                        .HasForeignKey("StaticPageResourceModelId");

                    b.Navigation("Product");

                    b.Navigation("Resource");
                });

            modelBuilder.Entity("WePromoLink.Models.StripeBillingMethod", b =>
                {
                    b.HasOne("WePromoLink.Models.UserModel", "User")
                        .WithOne("StripeBillingMethod")
                        .HasForeignKey("WePromoLink.Models.StripeBillingMethod", "UserModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WePromoLink.Models.SubscriptionFeatureModel", b =>
                {
                    b.HasOne("WePromoLink.Models.SubscriptionPlanModel", null)
                        .WithMany("Features")
                        .HasForeignKey("SubscriptionPlanModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WePromoLink.Models.SubscriptionModel", b =>
                {
                    b.HasOne("WePromoLink.Models.SubscriptionPlanModel", "SubscriptionPlan")
                        .WithMany("Subscriptions")
                        .HasForeignKey("SubscriptionPlanModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubscriptionPlan");
                });

            modelBuilder.Entity("WePromoLink.Models.SurveyAnswerModel", b =>
                {
                    b.HasOne("WePromoLink.Models.SurveyQuestionModel", "SurveyQuestionModel")
                        .WithMany("Answers")
                        .HasForeignKey("SurveyQuestionModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SurveyQuestionModel");
                });

            modelBuilder.Entity("WePromoLink.Models.SurveyDatapointModel", b =>
                {
                    b.HasOne("WePromoLink.Models.SurveyAnswerModel", "SurveyAnswerModel")
                        .WithMany("Datapoints")
                        .HasForeignKey("SurveyAnswerModelId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WePromoLink.Models.SurveyQuestionModel", "SurveyQuestionModel")
                        .WithMany("Datapoints")
                        .HasForeignKey("SurveyQuestionModelId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("SurveyAnswerModel");

                    b.Navigation("SurveyQuestionModel");
                });

            modelBuilder.Entity("WePromoLink.Models.UserModel", b =>
                {
                    b.HasOne("WePromoLink.Models.SubscriptionModel", "Subscription")
                        .WithOne("User")
                        .HasForeignKey("WePromoLink.Models.UserModel", "SubscriptionModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("WePromoLink.Models.CampaignModel", b =>
                {
                    b.Navigation("Links");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("WePromoLink.Models.LinkModel", b =>
                {
                    b.Navigation("Hits");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("WePromoLink.Models.SubscriptionModel", b =>
                {
                    b.Navigation("User")
                        .IsRequired();
                });

            modelBuilder.Entity("WePromoLink.Models.SubscriptionPlanModel", b =>
                {
                    b.Navigation("Features");

                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("WePromoLink.Models.SurveyAnswerModel", b =>
                {
                    b.Navigation("Datapoints");
                });

            modelBuilder.Entity("WePromoLink.Models.SurveyQuestionModel", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("Datapoints");
                });

            modelBuilder.Entity("WePromoLink.Models.UserModel", b =>
                {
                    b.Navigation("AffiliateProgram")
                        .IsRequired();

                    b.Navigation("AffiliatedUsers");

                    b.Navigation("BitcoinBillingMethod")
                        .IsRequired();

                    b.Navigation("Campaigns");

                    b.Navigation("Links");

                    b.Navigation("MyPage")
                        .IsRequired();

                    b.Navigation("Notifications");

                    b.Navigation("Privacy")
                        .IsRequired();

                    b.Navigation("Profile")
                        .IsRequired();

                    b.Navigation("Setting")
                        .IsRequired();

                    b.Navigation("StripeBillingMethod")
                        .IsRequired();

                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
